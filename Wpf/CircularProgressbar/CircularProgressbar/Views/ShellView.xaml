<Window x:Class="CircularProgressbar.Views.ShellView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CircularProgressbar.Views" xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls" xmlns:local1="clr-namespace:CircularProgressbar"
        mc:Ignorable="d"
        xmlns:root="clr-namespace:CircularProgressbar"
        xmlns:vm="clr-namespace:CircularProgressbar.ViewModels"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:converters="clr-namespace:CircularProgressbar.Converters"
        d:DataContext="{d:DesignInstance Type=vm:ShellViewModel}"
        Title="ShellView" Height="450" Width="800">
    <Window.Resources>
        <converters:AngleToIsLargeConverter x:Key="AngleToIsLargeConverter"/>

        <ObjectDataProvider x:Key="AvailableOverLayModes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="root:OverlayMode"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


    </Window.Resources>
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="200"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="100"/>
        </Grid.RowDefinitions>

        <Border BorderThickness="1" BorderBrush="Green">
            <Viewbox Stretch="Uniform" Margin="10">
                <Grid>
                    <Canvas Height="100" Width="100" >
                        <Path Stroke="LightGray" StrokeThickness="{Binding BackgroundCircle.Thickness}" >
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure  StartPoint="{Binding BackgroundCircle.StartPosition}">
                                        <PathFigure.Segments>
                                            <ArcSegment RotationAngle="0" SweepDirection="Clockwise"
                                                        Size="{Binding BackgroundCircle.Radius}"
                                                        IsLargeArc="True"
                                                    Point="{Binding BackgroundCircle.EndPosition}"
                                                        >

                                            </ArcSegment>

                                        </PathFigure.Segments>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>

                        <Path Stroke="Blue" StrokeThickness="{Binding ValueCircle.Thickness}" StrokeEndLineCap="Round">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure  StartPoint="{Binding ValueCircle.StartPosition}">
                                        <PathFigure.Segments>
                                            <ArcSegment RotationAngle="0" SweepDirection="Clockwise"
                                                        Size="{Binding ValueCircle.Radius}"
                                                        IsLargeArc="{Binding ValueCircle.Angle,Converter={StaticResource AngleToIsLargeConverter}}"
                                                    Point="{Binding ValueCircle.EndPosition}"
                                                        >

                                            </ArcSegment>

                                        </PathFigure.Segments>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>

                    </Canvas>
                    <TextBlock Text="{Binding CurrentValue}" FontSize="32" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </Grid>
            </Viewbox>
        </Border>

        <StackPanel Grid.Column="1" Grid.Row="0" Margin="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Overlay Mode"/>
                <ComboBox ItemsSource="{Binding Source={StaticResource AvailableOverLayModes}}" SelectedItem="{Binding SelectedOverlayMode}"/>
            </Grid>


            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Bg Thickness"/>
                <mah:NumericUpDown Grid.Column="1" Minimum="0" HideUpDownButtons="True"
                   Maximum="1000"
                   Interval="1"
                   Value="{Binding BackgroundCircle.Thickness}"/>
            </Grid>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Value Thickness"/>
                <mah:NumericUpDown Grid.Column="1" Minimum="0" HideUpDownButtons="True"
                   Maximum="1000"
                   Interval="1"
                    Value="{Binding ValueCircle.Thickness}"/>
            </Grid>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Min"/>
                <mah:NumericUpDown Grid.Column="1" Minimum="0" HideUpDownButtons="True"
                   Maximum="1000"
                   Interval="1"
                    Value="{Binding MinValue}"/>
            </Grid>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Max"/>
                <mah:NumericUpDown Minimum="0" Grid.Column="1" HideUpDownButtons="True"
                   Maximum="1000"
                   Interval="1"
                                   Value="{Binding MaxValue}"/>
            </Grid>


            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="6*"/>
                </Grid.ColumnDefinitions>

                <Label Content="Value"/>
                <mah:NumericUpDown Minimum="0" Grid.Column="1" HideUpDownButtons="True"
                   Maximum="1000"
                   Interval="1"
                                   Value="{Binding CurrentValue}"/>
            </Grid>

            <Button x:Name="Reset" Content="Reset"/>
        </StackPanel>

        <ProgressBar  Grid.Row="1" Grid.Column="0" Height="20" Minimum="{Binding MinValue}" Maximum="{Binding MaxValue}" Value="{Binding CurrentValue}"/>

    </Grid>
</Window>
